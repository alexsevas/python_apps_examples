# conda activate g4fpy311
# pip install pywhispercpp sounddevice numpy

'''
–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
(1) –¶–∏–∫–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ —Å–ª—É—à–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω.
(2) –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–¥—ë—Ç –Ω–∞ –ª–µ—Ç—É: –∏—â–µ–º wake-word ‚Äú–ê–ª–∏—Å–∞‚Äù.
(3) –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
(4) –ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ø–∞—É–∑–∞ > 1.5 —Å–µ–∫, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ñ—Ä–∞–∑–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.
(5) –†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É (1).

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –ü–æ–∫–∞ –≤—ã –Ω–µ —Å–∫–∞–∑–∞–ª–∏ ‚Äú–ê–ª–∏—Å–∞‚Äù, –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Ç–æ–∫–∞ –∏ –∏—â–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.
- –ü–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –≤–∞—à–µ–π —Ñ—Ä–∞–∑—ã.
- –ö–æ–≥–¥–∞ —Ç–∏—à–∏–Ω–∞ >1.5 —Å–µ–∫—É–Ω–¥—ã ‚Üí —Ñ—Ä–∞–∑–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç.
- –ó–∞—Ç–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–Ω–æ–≤–∞ –∂–¥—ë—Ç ‚Äú–ê–ª–∏—Å–∞‚Äù.
'''

import asyncio
import sounddevice as sd
import numpy as np
import queue
import time
from pywhispercpp.model import Model

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
WAKE_WORD = "–∞–ª–∏—Å–∞"
SAMPLE_RATE = 16000
BLOCK_SIZE = 1024
SILENCE_TIMEOUT = 1.5  # —Å–µ–∫—É–Ω–¥–∞ –ø–∞—É–∑—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã

# –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper.cpp –º–æ–¥–µ–ª—å
model = Model('large-v3-turbo-q5_0')
#model = Model("D:/AI/TalkLlamaFast/TalkLlama/ggml-medium-q5_0.bin")

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—É–¥–∏–æ
audio_queue = queue.Queue()


def audio_callback(indata, frames, time_info, status):
    """–ó–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    if status:
        print(status)
    audio_queue.put(indata.copy())


async def transcribe_stream():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    print("üé§ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –°–∫–∞–∂–∏—Ç–µ '–ê–ª–∏—Å–∞'...")

    with sd.InputStream(
        samplerate=SAMPLE_RATE,
        channels=1,
        blocksize=BLOCK_SIZE,
        dtype="float32",
        callback=audio_callback,
    ):
        buffer = []
        in_session = False
        last_voice_time = None

        while True:
            # –∂–¥–µ–º –∞—É–¥–∏–æ
            data = audio_queue.get()
            buffer.extend(data[:, 0].tolist())

            # –µ—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –µ—â–µ –Ω–µ—Ç ‚Üí –∏—â–µ–º wake word
            if not in_session:
                if len(buffer) > SAMPLE_RATE * 3:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã
                    audio_chunk = np.array(buffer[-SAMPLE_RATE * 3 :], dtype=np.float32)
                    segments = model.transcribe(audio_chunk, language="ru")
                    text = " ".join(segment.text for segment in segments).lower().strip()
                    if WAKE_WORD in text:
                        print("‚úÖ Wake word –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
                        in_session = True
                        buffer = []  # –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                        last_voice_time = time.time()
            else:
                # –º—ã –≤ —Å–µ—Å—Å–∏–∏ ‚Üí —Å–ª—É—à–∞–µ–º –¥–æ –ø–∞—É–∑—ã
                rms = np.sqrt(np.mean(np.square(data)))
                if rms > 0.01:  # –µ—Å—Ç—å –≥–æ–ª–æ—Å
                    last_voice_time = time.time()

                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—É–∑—É
                if last_voice_time and (time.time() - last_voice_time > SILENCE_TIMEOUT):
                    if buffer:
                        audio_chunk = np.array(buffer, dtype=np.float32)
                        result = model.transcribe(audio_chunk, language="ru")
                        text = result["text"].strip()
                        print(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: {text}")
                    else:
                        print("‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞")
                    # —Å–±—Ä–æ—Å –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
                    in_session = False
                    buffer = []
                    print("üé§ –°–∫–∞–∂–∏—Ç–µ '–ê–ª–∏—Å–∞'...")


async def main():
    await transcribe_stream()


if __name__ == "__main__":
    asyncio.run(main())
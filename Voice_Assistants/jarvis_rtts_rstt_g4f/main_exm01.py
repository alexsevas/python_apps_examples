# conda activate rtts

# pip install PyQt5 asyncio sounddevice numpy RealtimeSTT RealtimeTTS g4f

'''
–û–®–ò–ë–ö–ò:
- –¥–æ–ª–≥–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
-‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ STT: One or more keywords are not available by default.
Available default keywords are:\nok google, hey google, grapefruit, jarvis, porcupine, grasshopper, picovoice, computer,
bumblebee, blueberry, pico clock, alexa, hey siri, terminator, americano
-
'''


import sys
import asyncio
import json
import os
import threading
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QTextEdit, QPushButton,
    QVBoxLayout, QWidget, QLabel, QHBoxLayout
)
from PyQt5.QtCore import pyqtSignal, QObject, Qt
import sounddevice as sd
import numpy as np
from RealtimeSTT import AudioToTextRecorder
from RealtimeTTS import TextToAudioStream, SystemEngine
import g4f
from g4f.client import Client

# ========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ========================
KEYWORD = "–¥–∂–∞—Ä–≤–∏—Å"
HISTORY_FILE = "dialog_history.json"
SAMPLE_RATE = 16000
BLOCK_SIZE = 1024

# ========================
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è PyQt
# ========================
class AsyncHelper(QObject):
    finished = pyqtSignal(object)

    def __init__(self, coroutine):
        super().__init__()
        self.coroutine = coroutine

    def run(self):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(self.coroutine)
            self.finished.emit(result)
        except Exception as e:
            self.finished.emit(e)
        finally:
            loop.close()

# ========================
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
# ========================
class JarvisAssistant(QMainWindow):
    update_log_signal = pyqtSignal(str)
    update_status_signal = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ì–æ–ª–æ—Å–æ–≤–æ–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –î–∂–∞—Ä–≤–∏—Å")
        self.setGeometry(100, 100, 600, 500)
        self.is_listening = False
        self.dialog_history = self.load_history()
        self.recorder = None
        self.tts_engine = SystemEngine()
        self.tts_stream = TextToAudioStream(self.tts_engine)
        self.client = Client()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
        self.init_ui()
        self.update_log_signal.connect(self.append_log)
        self.update_status_signal.connect(self.set_status)

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
        self.start_background_listener()

    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout()

        # –õ–æ–≥ –¥–∏–∞–ª–æ–≥–∞
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ...")
        self.status_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.status_label)

        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        self.toggle_button = QPushButton("–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ")
        self.toggle_button.clicked.connect(self.toggle_listening)
        button_layout.addWidget(self.toggle_button)

        layout.addLayout(button_layout)
        central_widget.setLayout(layout)

    def set_status(self, text):
        self.status_label.setText(f"–°—Ç–∞—Ç—É—Å: {text}")

    def append_log(self, text):
        self.log_text.append(text)

    def toggle_listening(self):
        self.is_listening = not self.is_listening
        self.toggle_button.setText(
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ" if self.is_listening else "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"
        )
        if self.is_listening:
            self.update_log_signal.emit("<b>üéôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ì–æ–≤–æ—Ä–∏—Ç–µ '–î–∂–∞—Ä–≤–∏—Å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.</b>")
        else:
            self.update_log_signal.emit("<i>üîá –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</i>")

    def load_history(self):
        if os.path.exists(HISTORY_FILE):
            try:
                with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                return []
        return []

    def save_history(self):
        try:
            with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.dialog_history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def start_background_listener(self):
        thread = threading.Thread(target=self.run_async_listener, daemon=True)
        thread.start()

    def run_async_listener(self):
        asyncio.run(self.background_listener())

    async def background_listener(self):
        try:
            self.recorder = AudioToTextRecorder(
                model="base",
                language="ru",
                wake_words=KEYWORD,
                wake_word_activation_delay=0.5,
                enable_realtime_transcription=True,
                realtime_processing_pause=0.5
            )
        except Exception as e:
            self.update_log_signal.emit(f"<b>‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ STT: {e}</b>")
            return

        self.update_status_signal.emit("–û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...")
        while True:
            if not self.is_listening:
                await asyncio.sleep(0.5)
                continue

            try:
                self.update_status_signal.emit("–°–ª—É—à–∞—é '–î–∂–∞—Ä–≤–∏—Å'...")
                text = await asyncio.to_thread(self.recorder.text)
                if not text.strip():
                    continue

                self.update_log_signal.emit(f"<b>üëÇ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b> {text}")

                if KEYWORD in text.lower():
                    await self.handle_query()
                else:
                    self.update_status_signal.emit("–û–∂–∏–¥–∞—é '–î–∂–∞—Ä–≤–∏—Å'...")

            except Exception as e:
                self.update_log_signal.emit(f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}</b>")
                await asyncio.sleep(1)

    async def handle_query(self):
        self.update_status_signal.emit("–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        self.update_log_signal.emit("<i>üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...</i>")

        try:
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            self.recorder.stop()
            await asyncio.sleep(0.2)
            self.recorder.start()

            question = await asyncio.to_thread(self.recorder.text)
            if not question.strip():
                self.update_log_signal.emit("<i>‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å.</i>")
                self.update_status_signal.emit("–û–∂–∏–¥–∞—é '–î–∂–∞—Ä–≤–∏—Å'...")
                return

            self.update_log_signal.emit(f"<b>–í—ã:</b> {question}")
            self.dialog_history.append({"role": "user", "content": question})

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM
            self.update_status_signal.emit("–î—É–º–∞—é...")
            answer = await self.get_llm_response(question)

            self.update_log_signal.emit(f"<b>–î–∂–∞—Ä–≤–∏—Å:</b> {answer}")
            self.dialog_history.append({"role": "assistant", "content": answer})
            self.save_history()

            # –ü—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            self.update_status_signal.emit("–ì–æ–≤–æ—Ä—é –æ—Ç–≤–µ—Ç...")
            await asyncio.to_thread(self.speak, answer)

            self.update_status_signal.emit("–û–∂–∏–¥–∞—é '–î–∂–∞—Ä–≤–∏—Å'...")

        except Exception as e:
            self.update_log_signal.emit(f"<b>‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}</b>")
            self.update_status_signal.emit("–û–∂–∏–¥–∞—é '–î–∂–∞—Ä–≤–∏—Å'...")

    async def get_llm_response(self, question: str) -> str:
        try:
            messages = [
                {"role": "system", "content": "–¢—ã ‚Äî –î–∂–∞—Ä–≤–∏—Å, –≤–µ–∂–ª–∏–≤—ã–π –∏ —É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —è—Å–Ω–æ –∏ –ø–æ –¥–µ–ª—É."},
            ] + self.dialog_history + [
                {"role": "user", "content": question}
            ]

            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="deepseek-r1-0528-turbo",
                messages=messages,
                temperature=0.7,
                max_tokens=500
            )

            return response.choices[0].message.content.strip()

        except Exception as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

    def speak(self, text: str):
        try:
            if self.tts_stream.is_playing():
                self.tts_stream.stop()
            self.tts_stream.feed(text)
            self.tts_stream.play()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ TTS: {e}")

    def closeEvent(self, event):
        self.save_history()
        if self.recorder:
            self.recorder.shutdown()
        event.accept()

# ========================
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ========================
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = JarvisAssistant()
    window.show()
    sys.exit(app.exec_())